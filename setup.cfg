[metadata]
name = torchlaplace
description = Differentiable Laplace Reconstructions in PyTorch
author = Sam Holt
author_email = samuel.holt.direct@gmail.com
license = MIT
license_files = LICENSE
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8
url = https://github.com/samholt/NeuralLaplace

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Programming Language :: Python :: 3
    Topic :: Scientific/Engineering :: Artificial Intelligence
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent

[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =.

# Require a min/specific Python version (comma-separated conditions)
# python_requires = >=3.8

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    torch>=1.3.0
    scipy>=1.4.0
    importlib-metadata; python_version<"3.8"


[options.packages.find]
where = .
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install hyperimpute[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov
    pytest-benchmark
    tabulate
    bandit
    black
    flake8
    pre-commit
    xlrd

experiments =
    ddeint
    keyboard
    matplotlib
    pandas
    sklearn
    stribor==0.1.0
    torchdiffeq>=0.2.1
    torchvision
    tqdm
    Sphinx
    sphinx-rtd-theme
    sphinx-panels
    nbsphinx

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 120
extend_ignore = E203, E231, E712, E501, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py
